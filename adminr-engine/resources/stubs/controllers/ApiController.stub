<?php

namespace App\Http\Controllers\Api;

use App\Models\{{MODEL_CLASS}};
use Illuminate\Http\Request;
use Devsbuddy\AdminrEngine\Http\Controllers\AdminrController;
use Devsbuddy\AdminrEngine\Traits\HasResponse;
use Illuminate\Support\Str;

class {{CONTROLLER_CLASS}} extends AdminrController
{
    use HasResponse;

    private $resultLimit;

    public function __construct(){
        $this->resultLimit = {{RESULT_LIMIT}};
    }

    /**
     * Display a listing of the resource.
     *
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function index(Request $request)
    {
        try{
            $page = $request->has('page') ? $request->get('page') : 1;
            $limit = $request->has('limit') ? $request->get('limit') : $this->resultLimit;

            ${{MODEL_ENTITIES}} = {{MODEL_CLASS}}::query();

            {{SEARCH_STATEMENTS}}

            ${{MODEL_ENTITIES}} = ${{MODEL_ENTITIES}}->limit($limit)->offset(($page - 1) * $limit)->get();

            return $this->success(${{MODEL_ENTITIES}});
        } catch(\Exception $e){
            return $this->error("Error: " . $e->getMessage());
        }
    }

    /**
     * Return single instance of the requested resource
     *
     * @param {{MODEL_CLASS}} ${{MODEL_ENTITY}}
     * @return \Illuminate\Http\JsonResponse
     */
    public function show({{MODEL_CLASS}} ${{MODEL_ENTITY}})
    {
        try{
            return $this->success(${{MODEL_ENTITY}});
        } catch(\Exception $e){
            return $this->error("Error: " . $e->getMessage());
        }
    }

    /**
     * Store a newly created resource.
     *
     * @param  Request  $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function store(Request $request)
    {
        try{
            {{VALIDATION_STATEMENT}}

            {{FILE_UPLOAD_API_STATEMENT}}
            ${{MODEL_ENTITY}} = {{MODEL_CLASS}}::create([
                {{SAVE_DATA_STATEMENT}}
            ]);

            return $this->success(${{MODEL_ENTITY}}, 201);
        } catch(\Exception $e){
            return $this->error("Error: " . $e->getMessage());
        }
    }

    /**
     * Update resource.
     *
     * @param Request $request
     * @param {{MODEL_CLASS}} ${{MODEL_ENTITY}}
     * @return \Illuminate\Http\JsonResponse
     */
    public function update(Request $request, {{MODEL_CLASS}} ${{MODEL_ENTITY}})
    {
        try{
            {{UPDATE_VALIDATION_STATEMENT}}

            {{FILE_UPDATE_STATEMENT}}
            ${{MODEL_ENTITY}} = ${{MODEL_ENTITY}}->update([
                {{UPDATE_DATA_STATEMENT}}
            ]);

            return $this->success(${{MODEL_ENTITY}}, 201);
        } catch(\Exception $e){
            return $this->error("Error: " . $e->getMessage());
        }
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int $id
     * @return \Illuminate\Http\JsonResponse
     */
    public function destroy($id)
    {
        try{
            ${{MODEL_ENTITY}} = {{MODEL_CLASS}}::findOrFail($id);
            {{DELETE_FILE_STATEMENT}}
            ${{MODEL_ENTITY}}->delete();

            return $this->successMessage("{{MODEL_ENTITY}} deleted successfully!");
        } catch(\Exception $e){
            return $this->error("Error: " . $e->getMessage());
        }
    }
}
